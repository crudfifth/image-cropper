# Generated by Django 4.2 on 2023-04-17 11:20

import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, default='', verbose_name='デバイス名')),
                ('device_number', models.IntegerField(default=0,verbose_name='デバイス型番')),
                ('edge_device_number', models.IntegerField(default=0,verbose_name='エッジデバイス番号')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='作成日時')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新日時')),
            ],
            options={
                'verbose_name': '0. デバイス一覧',
                'verbose_name_plural': '0. デバイス一覧',
            },
        ),
        migrations.CreateModel(
            name='DeviceType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, verbose_name='デバイスの種類名')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='作成日時')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新日時')),
            ],
            options={
                'verbose_name': '0. デバイス種類一覧',
                'verbose_name_plural': '0. デバイス種類一覧',
            },
        ),
        migrations.CreateModel(
            name='EnvironmentalType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, verbose_name='環境の種類名')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='作成日時')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新日時')),
            ],
            options={
                'verbose_name': '0. 環境種類一覧',
                'verbose_name_plural': '0. 環境種類一覧',
            },
        ),
        migrations.CreateModel(
            name='JCreditApplication',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, null=True, editable=False, primary_key=True, serialize=False)),
                ('electrical_value', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='電気/取得値(kWh)')),
                ('electrical_price', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='電気/料金(円)')),
                ('water_value', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='水/取得値(m3)')),
                ('water_price', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='水/料金(円)')),
                ('fuel_value', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='燃料/取得値(m3)')),
                ('fuel_price', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='燃料/料金(円)')),
                ('co2_value', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='CO2/取得値(t-CO2)')),
                ('co2_price', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='CO2/料金(円)')),
                ('energy_saving_value', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='省エネ創出(t-CO2)')),
                ('renewal_energy_value', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='再エネ創出(t-CO2)')),
                ('utility_costs', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='光熱費(円)')),
                ('get_data_date', models.DateTimeField(default=datetime.datetime(2023, 1, 1, 0, 0), verbose_name='取得日時')),
                ('application_date', models.DateField(default='2020-4-1', verbose_name='会員基本情報:入会申込日')),
                ('member_name', models.CharField(default='○○温泉', max_length=255, verbose_name='会員基本情報:会員名')),
                ('member_postal_code', models.CharField(default='000-0000', max_length=10, verbose_name='会員基本情報:会員郵便番号(任意)')),
                ('member_address', models.CharField(default='群馬県○○市△△xx-xx', max_length=255, verbose_name='会員基本情報:会員住所 (任意)')),
                ('member_phone_number', models.CharField(default='xx-xxxx-1111', max_length=20, verbose_name='会員基本情報:会員電話番号(任意)')),
                ('installation_postal_code', models.CharField(default='000-0000', max_length=10, verbose_name='会員基本情報:設置場所郵便番号(任意)')),
                ('installation_address', models.CharField(default='群馬県○○市△△xx-xx', max_length=255, verbose_name='会員基本情報:設置場所住所 (必ず都道府県名から記載)')),
                ('keidanren_carbon_neutral_participation', models.BooleanField(default=False, verbose_name='会員基本情報:経団連カーボンニュートラル行動計画への参加')),
                ('energy_conservation_law_specified_business_number', models.CharField(default='11111', max_length=255, verbose_name='会員基本情報:省エネ法特定事業者番号')),
                ('global_warming_countermeasures_specified_emitter_code', models.CharField(default='00000', max_length=255, verbose_name='会員基本情報:温対法特定排出者コード')),
                ('base_manufacturer_name', models.CharField(default='〇〇工業', max_length=255, verbose_name='ベースライン設備情報:メーカー名')),
                ('base_model', models.CharField(default='abcde', max_length=255, verbose_name='ベースライン設備情報:型式')),
                ('base_quantity', models.IntegerField(default=1, verbose_name='ベースライン設備情報:台数')),
                ('base_output', models.CharField(default='200kW', max_length=255, verbose_name='ベースライン設備情報:出力')),
                ('base_unit_heat_gen_of_fossil_fuel_in_base_boiler', models.CharField(default='高位発熱量基準', max_length=255, verbose_name='ベースライン設備情報:ベースラインのボイラーで使用する化石燃料の単位発熱量（GJ/ｔ）')),
                ('base_efficiency_percentage', models.FloatField(default=89.0, verbose_name='ベースライン設備情報:効率（％）')),
                ('base_efficiency_of_standard_equipment_percentage', models.FloatField(default=90.0, verbose_name='ベースライン設備情報:標準的な設備の効率（％）')),
                ('base_fuel_type', models.CharField(default='灯油', max_length=255, verbose_name='ベースライン設備情報:燃料種')),
                ('base_legal_service_life_years', models.IntegerField(default=15, verbose_name='ベースライン設備情報:法定耐用年数（年）')),
                ('base_installation_date', models.DateField(default='2008-6-25', verbose_name='ベースライン設備情報:導入日')),
                ('base_operation_end_date', models.DateField(default='2019-7-24', verbose_name='ベースライン設備情報:稼動終了日')),
                ('base_years_of_operation', models.IntegerField(default=11, verbose_name='ベースライン設備情報:稼動年数')),
                ('updated_manufacturer_name', models.CharField(default='△△機械', max_length=255, verbose_name='更新後の設備情報:メーカー')),
                ('updated_model', models.CharField(default='abcde', max_length=255, verbose_name='更新後の設備情報:型式')),
                ('updated_quantity', models.IntegerField(default=1, verbose_name='更新後の設備情報:台数')),
                ('updated_unique_number', models.CharField(default='abcde-12345', max_length=255, verbose_name='更新後の設備情報:固有番号 (製造番号等)')),
                ('updated_output', models.CharField(default='200ｋW', max_length=255, verbose_name='更新後の設備情報:出力')),
                ('updated_unit_heat_gen_of_fossil_fuel_in_base_boiler', models.CharField(default='高位発熱量基準', max_length=255, verbose_name='更新後の設備情報:ベースラインのボイラーで使用する化石燃料の単位発熱量（GJ/ｔ）')),
                ('updated_efficiency_percentage', models.FloatField(default=95.0, verbose_name='更新後の設備情報:効率（％）')),
                ('updated_fuel_type', models.CharField(default='都市ガス', max_length=255, verbose_name='更新後の設備情報:燃料種')),
                ('eval_investment_recovery_years', models.FloatField(default=21.7, verbose_name='追加性評価:投資回収年数（年）')),
                ('eval_total_investment_amount', models.FloatField(default=25000000, verbose_name='追加性評価:総投資額（円）')),
                ('eval_subsidy_amount', models.FloatField(default=20000000, verbose_name='追加性評価:補助金額（円）')),
                ('eval_net_investment_amount', models.FloatField(default=5000000, verbose_name='追加性評価:純投資額（円）')),
                ('eval_running_cost_before_implementation', models.FloatField(default=1670684, verbose_name='追加性評価:実施前ランニングコスト（円）')),
                ('eval_running_cost_after_implementation', models.FloatField(default=1440000, verbose_name='追加性評価:実施後ランニングコスト（円）')),
                ('eval_baseline_fuel_unit_price_per_month', models.FloatField(default=15000, verbose_name='追加性評価:ベースライン燃料単価（円/Nm3等/月）')),
                ('eval_post_implementation_fuel_unit_price_per_month', models.FloatField(default=120000, verbose_name='追加性評価:ＰJ実施後燃料単価（円/Nm3等/月）')),
                ('eval_existing_maintenance_cost_per_year', models.FloatField(default=10000000, verbose_name='追加性評価:既設メンテナンス費（円/年）')),
                ('eval_post_implementation_maintenance_cost_per_year', models.FloatField(default=8000000, verbose_name='追加性評価:PJ実施後メンテナンス費（円/年）')),
                ('eval_documentation', models.CharField(default='補助金交付決定通知書', max_length=255, verbose_name='追加性評価:確認書類')),
                ('eval_subsidy_name', models.CharField(default='・・・', max_length=255, verbose_name='追加性評価:補助金名称')),
                ('eval_granting_organization_of_subsidy', models.CharField(default='・・・', max_length=255, verbose_name='追加性評価:補助金交付団体')),
                ('eval_domestically_implemented_in_japan', models.BooleanField(default=True, verbose_name='追加性評価:○：環境省ではない又は補助金を利用していない。×：環境省')),
                ('operating_start_date', models.DateField(default='2020-4-1', verbose_name='基準日:稼動開始日')),
                ('certify_start_date', models.DateField(default='2020-4-1', verbose_name='基準日:開始日')),
                ('certify_end_date', models.DateField(default='2028-3-31', verbose_name='基準日:終了日')),
                ('requirement_implemented_in_japan', models.BooleanField(default=True, verbose_name='プロジェクト登録要件の可否:日本国内で実施される')),
                ('requirement_project_execution_date', models.BooleanField(default=True, verbose_name='プロジェクト登録要件の可否:プロジェクト実施日')),
                ('requirement_certification_start_date', models.BooleanField(default=True, verbose_name='プロジェクト登録要件の可否:認証開始日')),
                ('requirement_equipment_efficiency_higher_than_standard', models.BooleanField(default=True, verbose_name='プロジェクト登録要件の可否:PJ実施後設備が標準的な設備効率より良いか')),
                ('requirement_additivity', models.BooleanField(default=True, verbose_name='プロジェクト登録要件の可否:追加性')),
                ('unit_heat_gen_of_fossil_fuels_in_base_boiler', models.CharField(default='38.9', max_length=255, verbose_name=':ベースラインのボイラーで使用する化石燃料の単位発熱量（GJ/ｔ,GJ/千Nm3等）')),
                ('co2_per_unit_heat_ge_fuels_in_base_boiler', models.FloatField(default=0.0686, verbose_name=':ベースラインのボイラーで使用する化石燃料の単位発熱量当たりのCO2排出係数（ｔCO2/GJ）')),
                ('unit_heat_gen_of_fuel_used_in_boiler_after_project_exec', models.CharField(default='45.1', max_length=255, verbose_name=':プロジェクト実施後のボイラーで使用する燃料の単位発熱量（GJ/ｔ,GJ/千Nm3等）')),
                ('co2_per_unit_heat_ge_fuels_used_in_boiler_after_exec', models.FloatField(default=0.0513, verbose_name=':プロジェクト実施後のボイラーで使用する化石燃料の単位発熱量当たりのCO2排出係数（ｔCO2/GJ）')),
                ('monitoring_period_in_months', models.FloatField(default=12.0, verbose_name='モニタリング測定結果:モニタリング期間（ヶ月）')),
                ('monitoring_measurement_value_of_fuel_consumption', models.CharField(default='100.0', max_length=255, verbose_name='モニタリング測定結果:モニタリング測定値（燃料使用量）（t、kl、千Nm3）')),
                ('monitoring_classification', models.CharField(default='分類C：概算', max_length=255, verbose_name='モニタリング測定結果:分類')),
                ('monitoring_measurement_error_rate_in_c', models.CharField(default='10.0', max_length=255, verbose_name='モニタリング測定結果:分類Cにおいて計量器を用いた場合の誤差率（%）')),
                ('monitoring_final_value', models.CharField(default='90.0', max_length=255, verbose_name='モニタリング測定結果:最終的なモニタリング値')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='作成日時')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新日時')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='ユーザーID')),
            ],
            options={
                'verbose_name': 'Jクレジット申請',
                'verbose_name_plural': 'Jクレジット申請',
            },
        ),
        migrations.CreateModel(
            name='DeviceDataPerYear',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('electrical_value', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='電気/取得値(kWh)')),
                ('electrical_price', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='電気/料金(円)')),
                ('water_value', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='水/取得値(m3)')),
                ('water_price', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='水/料金(円)')),
                ('fuel_value', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='燃料/取得値(m3)')),
                ('fuel_price', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='燃料/料金(円)')),
                ('co2_value', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='CO2/取得値(t-CO2)')),
                ('co2_price', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='CO2/料金(円)')),
                ('energy_saving_value', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='省エネ創出(t-CO2)')),
                ('renewal_energy_value', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='再エネ創出(t-CO2)')),
                ('utility_costs', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='光熱費(円)')),
                ('get_data_date', models.DateTimeField(default=datetime.datetime(2023, 1, 1, 0, 0), verbose_name='取得日時')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='作成日時')),
                ('year', models.IntegerField(default=2023, validators=[django.core.validators.MinValueValidator(2020), django.core.validators.MaxValueValidator(2100)], verbose_name='年')),
                ('device_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ihiapp.device', verbose_name='設備ID')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='ユーザーID')),
            ],
            options={
                'verbose_name': '2-4. 設備/年単位',
                'verbose_name_plural': '2-4. 設備/年単位',
            },
        ),
        migrations.CreateModel(
            name='DeviceDataPerMonth',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('electrical_value', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='電気/取得値(kWh)')),
                ('electrical_price', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='電気/料金(円)')),
                ('water_value', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='水/取得値(m3)')),
                ('water_price', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='水/料金(円)')),
                ('fuel_value', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='燃料/取得値(m3)')),
                ('fuel_price', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='燃料/料金(円)')),
                ('co2_value', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='CO2/取得値(t-CO2)')),
                ('co2_price', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='CO2/料金(円)')),
                ('energy_saving_value', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='省エネ創出(t-CO2)')),
                ('renewal_energy_value', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='再エネ創出(t-CO2)')),
                ('utility_costs', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='光熱費(円)')),
                ('get_data_date', models.DateTimeField(default=datetime.datetime(2023, 1, 1, 0, 0), verbose_name='取得日時')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='作成日時')),
                ('year', models.IntegerField(default=2023, validators=[django.core.validators.MinValueValidator(2020), django.core.validators.MaxValueValidator(2100)], verbose_name='年')),
                ('month', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)], verbose_name='月')),
                ('device_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ihiapp.device', verbose_name='設備ID')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='ユーザーID')),
            ],
            options={
                'verbose_name': '2-3. 設備/月単位',
                'verbose_name_plural': '2-3. 設備/月単位',
            },
        ),
        migrations.CreateModel(
            name='DeviceDataPerHour',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('electrical_value', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='電気/取得値(kWh)')),
                ('electrical_price', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='電気/料金(円)')),
                ('water_value', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='水/取得値(m3)')),
                ('water_price', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='水/料金(円)')),
                ('fuel_value', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='燃料/取得値(m3)')),
                ('fuel_price', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='燃料/料金(円)')),
                ('co2_value', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='CO2/取得値(t-CO2)')),
                ('co2_price', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='CO2/料金(円)')),
                ('energy_saving_value', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='省エネ創出(t-CO2)')),
                ('renewal_energy_value', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='再エネ創出(t-CO2)')),
                ('utility_costs', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='光熱費(円)')),
                ('get_data_date', models.DateTimeField(default=datetime.datetime(2023, 1, 1, 0, 0), verbose_name='取得日時')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='作成日時')),
                ('year', models.IntegerField(default=2023, validators=[django.core.validators.MinValueValidator(2020), django.core.validators.MaxValueValidator(2100)], verbose_name='年')),
                ('month', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)], verbose_name='月')),
                ('date', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(31)], verbose_name='日')),
                ('hour', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(23)], verbose_name='時間')),
                ('minute', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(59)], verbose_name='分')),
                ('device_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ihiapp.device', verbose_name='設備ID')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='ユーザーID')),
            ],
            options={
                'verbose_name': '2-1. 設備/時間単位',
                'verbose_name_plural': '2-1. 設備/時間単位',
            },
        ),
        migrations.CreateModel(
            name='DeviceDataPerDate',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('electrical_value', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='電気/取得値(kWh)')),
                ('electrical_price', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='電気/料金(円)')),
                ('water_value', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='水/取得値(m3)')),
                ('water_price', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='水/料金(円)')),
                ('fuel_value', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='燃料/取得値(m3)')),
                ('fuel_price', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='燃料/料金(円)')),
                ('co2_value', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='CO2/取得値(t-CO2)')),
                ('co2_price', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='CO2/料金(円)')),
                ('energy_saving_value', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='省エネ創出(t-CO2)')),
                ('renewal_energy_value', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='再エネ創出(t-CO2)')),
                ('utility_costs', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='光熱費(円)')),
                ('get_data_date', models.DateTimeField(default=datetime.datetime(2023, 1, 1, 0, 0), verbose_name='取得日時')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='作成日時')),
                ('year', models.IntegerField(default=2023, validators=[django.core.validators.MinValueValidator(2020), django.core.validators.MaxValueValidator(2100)], verbose_name='年')),
                ('month', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)], verbose_name='月')),
                ('date', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(31)], verbose_name='日')),
                ('device_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ihiapp.device', verbose_name='設備ID')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='ユーザーID')),
            ],
            options={
                'verbose_name': '2-2. 設備/日単位',
                'verbose_name_plural': '2-2. 設備/日単位',
            },
        ),
        migrations.AddField(
            model_name='device',
            name='device_type_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, null=True, to='ihiapp.devicetype', verbose_name='デバイスの種類ID'),
        ),
        migrations.AddField(
            model_name='device',
            name='environmental_type_id',
            field=models.ForeignKey(null=True,on_delete=django.db.models.deletion.CASCADE, to='ihiapp.environmentaltype', verbose_name='環境の種類ID'),
        ),
        migrations.AddField(
            model_name='device',
            name='user_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='ユーザーID'),
        ),
        migrations.CreateModel(
            name='DataPerYear',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('electrical_value', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='電気/取得値(kWh)')),
                ('electrical_price', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='電気/料金(円)')),
                ('water_value', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='水/取得値(m3)')),
                ('water_price', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='水/料金(円)')),
                ('fuel_value', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='燃料/取得値(m3)')),
                ('fuel_price', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='燃料/料金(円)')),
                ('co2_value', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='CO2/取得値(t-CO2)')),
                ('co2_price', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='CO2/料金(円)')),
                ('energy_saving_value', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='省エネ創出(t-CO2)')),
                ('renewal_energy_value', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='再エネ創出(t-CO2)')),
                ('utility_costs', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='光熱費(円)')),
                ('get_data_date', models.DateTimeField(default=datetime.datetime(2023, 1, 1, 0, 0), verbose_name='取得日時')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='作成日時')),
                ('year', models.IntegerField(default=2023, validators=[django.core.validators.MinValueValidator(2020), django.core.validators.MaxValueValidator(2100)], verbose_name='年')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='ユーザーID')),
            ],
            options={
                'verbose_name': '1-4. 合計値/年単位',
                'verbose_name_plural': '1-4. 合計値/年単位',
            },
        ),
        migrations.CreateModel(
            name='DataPerMonth',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('electrical_value', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='電気/取得値(kWh)')),
                ('electrical_price', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='電気/料金(円)')),
                ('water_value', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='水/取得値(m3)')),
                ('water_price', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='水/料金(円)')),
                ('fuel_value', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='燃料/取得値(m3)')),
                ('fuel_price', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='燃料/料金(円)')),
                ('co2_value', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='CO2/取得値(t-CO2)')),
                ('co2_price', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='CO2/料金(円)')),
                ('energy_saving_value', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='省エネ創出(t-CO2)')),
                ('renewal_energy_value', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='再エネ創出(t-CO2)')),
                ('utility_costs', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='光熱費(円)')),
                ('get_data_date', models.DateTimeField(default=datetime.datetime(2023, 1, 1, 0, 0), verbose_name='取得日時')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='作成日時')),
                ('year', models.IntegerField(default=2023, validators=[django.core.validators.MinValueValidator(2020), django.core.validators.MaxValueValidator(2100)], verbose_name='年')),
                ('month', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)], verbose_name='月')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='ユーザーID')),
            ],
            options={
                'verbose_name': '1-3. 合計値/月単位',
                'verbose_name_plural': '1-3. 合計値/月単位',
            },
        ),
        migrations.CreateModel(
            name='DataPerHour',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('electrical_value', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='電気/取得値(kWh)')),
                ('electrical_price', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='電気/料金(円)')),
                ('water_value', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='水/取得値(m3)')),
                ('water_price', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='水/料金(円)')),
                ('fuel_value', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='燃料/取得値(m3)')),
                ('fuel_price', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='燃料/料金(円)')),
                ('co2_value', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='CO2/取得値(t-CO2)')),
                ('co2_price', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='CO2/料金(円)')),
                ('energy_saving_value', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='省エネ創出(t-CO2)')),
                ('renewal_energy_value', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='再エネ創出(t-CO2)')),
                ('utility_costs', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='光熱費(円)')),
                ('get_data_date', models.DateTimeField(default=datetime.datetime(2023, 1, 1, 0, 0), verbose_name='取得日時')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='作成日時')),
                ('year', models.IntegerField(default=2023, validators=[django.core.validators.MinValueValidator(2020), django.core.validators.MaxValueValidator(2100)], verbose_name='年')),
                ('month', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)], verbose_name='月')),
                ('date', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(31)], verbose_name='日')),
                ('hour', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(23)], verbose_name='時間')),
                ('minute', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(59)], verbose_name='分')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='ユーザーID')),
            ],
            options={
                'verbose_name': '1-1. 合計値/時間単位',
                'verbose_name_plural': '1-1. 合計値/時間単位',
            },
        ),
        migrations.CreateModel(
            name='DataPerDate',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('electrical_value', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='電気/取得値(kWh)')),
                ('electrical_price', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='電気/料金(円)')),
                ('water_value', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='水/取得値(m3)')),
                ('water_price', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='水/料金(円)')),
                ('fuel_value', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='燃料/取得値(m3)')),
                ('fuel_price', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='燃料/料金(円)')),
                ('co2_value', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='CO2/取得値(t-CO2)')),
                ('co2_price', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='CO2/料金(円)')),
                ('energy_saving_value', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='省エネ創出(t-CO2)')),
                ('renewal_energy_value', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='再エネ創出(t-CO2)')),
                ('utility_costs', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='光熱費(円)')),
                ('get_data_date', models.DateTimeField(default=datetime.datetime(2023, 1, 1, 0, 0), verbose_name='取得日時')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='作成日時')),
                ('year', models.IntegerField(default=2023, validators=[django.core.validators.MinValueValidator(2020), django.core.validators.MaxValueValidator(2100)], verbose_name='年')),
                ('month', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)], verbose_name='月')),
                ('date', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(31)], verbose_name='日')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='ユーザーID')),
            ],
            options={
                'verbose_name': '1-2. 合計値/日単位',
                'verbose_name_plural': '1-2. 合計値/日単位',
            },
        ),
    ]
