"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 3.2.9.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import datetime
import logging
import os
from pathlib import Path

import environ

from corsheaders.defaults import default_headers

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = str(Path(__file__).resolve().parent.parent)
env = environ.Env(DEBUG=(bool,True))
env.read_env(os.path.join(BASE_DIR,'.env'))

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
# BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-*pdf2j5f(uxhx_+_-_$cy(no5#uggoy8^xl&j=%2=be_c$ixqx'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.get_value('DEBUG', cast=bool, default=True)

ALLOWED_HOSTS = env.get_value('ALLOWED_HOSTS').split(',')
CSRF_TRUSTED_ORIGINS = env.get_value('CSRF_TRUSTED_ORIGINS').split(',')

print("ALLOWED_HOSTS", ALLOWED_HOSTS)
print("CSRF_TRUSTED_ORIGINS", CSRF_TRUSTED_ORIGINS)

# Application definition
SPECTACULAR_SETTINGS = {
    'TITLE': 'IHI 可視化PF',
    'DESCRIPTION': 'API仕様書',
    'VERSION': '1.0.0',
}

REST_FRAMEWORK = {
    # 'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema'
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',

    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),

}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': datetime.timedelta(minutes=30),
    'REFRESH_TOKEN_LIFETIME': datetime.timedelta(days=30),
    'ROTATE_REFRESH_TOKENS': True,
    'UPDATE_LAST_LOGIN': True,
}

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    'django_rest_passwordreset',
    'ihiapp',
    'rest_framework',
    'corsheaders',
    'drf_spectacular',
    'import_export',
    'users',
    'rangefilter',
    'axes',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',    
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'axes.middleware.AxesMiddleware',
    'users.middleware.DenyDemoUserMiddleware'
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'ihi_db',
        'USER': 'ihi',
        'PASSWORD': 'ihi',
        'HOST': 'db',
        'PORT': 5432,
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'ihiapp.custom_password_validator.CustomPasswordValidator',
    },
]

AUTHENTICATION_BACKENDS = [
    'axes.backends.AxesBackend',
    'django.contrib.auth.backends.ModelBackend',
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'ja'

TIME_ZONE = 'Asia/Tokyo'

USE_I18N = True

USE_L10N = True

USE_TZ = True

USE_THOUSAND_SEPARATOR = True
NUMBER_GROUPING = 3


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/sensor/static/'

STATIC_ROOT = '/var/www/signage-sensor/config/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


CORS_ORIGIN_ALLOW_ALL=True

CORS_ALLOW_HEADERS = list(default_headers) + [
    'User-Activation-Token', 
]


# カスタマイズしたユーザーモデルを使用する
AUTH_USER_MODEL = 'users.User'


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    # ログ出力フォーマットの設定
    'formatters': {
        'production': {
            'format': '%(asctime)s [%(levelname)s] %(process)d %(thread)d '
                      '%(message)s'
        },
    },
    # ハンドラの設定
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
        },
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': './logs/{:%Y-%m-%d}.log'.format(datetime.datetime.now()),
            'formatter': 'production',
        },

    },
    # ロガーの設定
    'loggers': {
        # 自分で追加したアプリケーション全般のログを拾うロガー
        '': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        # Django自身が出力するログ全般を拾うロガー
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

SENDGRID_API_KEY = os.getenv('SENDGRID_API_KEY')
EMAIL_HOST = 'smtp.sendgrid.net'
EMAIL_HOST_USER = 'apikey' # this is exactly the value 'apikey'
EMAIL_HOST_PASSWORD = SENDGRID_API_KEY
EMAIL_PORT = 587
EMAIL_USE_TLS = True

FRONTEND_URL = os.getenv('FRONTEND_URL', 'https://biz.energysave-dashboard.com')

DJANGO_REST_MULTITOKENAUTH_RESET_TOKEN_EXPIRY_TIME = 72

ENCRYPTION_KEY = os.getenv('ENCRYPTION_KEY')


# AXES関連
AXES_FAILURE_LIMIT = 10 # ログイン失敗回数の上限
AXES_LOCK_OUT_AT_FAILURE = True # 失敗回数上限に達したらロック

# AXES_RESET_ON_SUCCESSはJWT認証との組み合わせで機能しないためコメントアウト
# CustomTokenObtainPairViewでログイン成功時に失敗回数をリセットする処理を追加している
# AXES_RESET_ON_SUCCESS = True # ログイン成功時に失敗回数をリセット

AXES_ONLY_USER_FAILURES = True # ログイン失敗回数のカウントはユーザーごとに行う
AXES_USERNAME_FORM_FIELD = 'email'

DEMO_ACCOUNT_PASSWORD = os.getenv('DEMO_ACCOUNT_PASSWORD', '')


# キャッシュシステムの設定
CACHE_TIMEOUT = 60 * 60 * 24  # 24時間
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'ihiapp',
        'TIMEOUT': CACHE_TIMEOUT,
    }
}

# パスワードリセット時に特定のメールアドレスが存在することを知らせないようにするために
# ユーザーが存在するかどうかに関わらず同じ応答を返す
DJANGO_REST_PASSWORDRESET_NO_INFORMATION_LEAKAGE = True